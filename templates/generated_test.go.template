package godec

{{ $encodeable := .Encodeable }}
{{ $pointerEncodeable := .PointerEncodeable }}
{{ $sliceEncodeable := .SliceEncodeable }}
{{ $mapEncodeable := .MapEncodeable }}
{{ $decodeable := .Decodeable }}
{{ $sliceDecodeable := .SliceDecodeable }}
{{ $mapDecodeable := .MapDencodeable }}

import (
  "testing"
	"time"
)

{{range $index, $name := $decodeable}}
func randomSliceOf{{gofilter $name}}Ptr() []*{{$name}} {
  rval := []*{{$name}}{}
	l := randomuint16() % 512
	for i := uint16(0); i < l; i++ {
	  if randomuint16() % 2 == 1 {
		  rval = append(rval, nil)
		} else {
      x := random{{gofilter $name}}()
		  rval = append(rval, &x)
		}
	}
	return rval
}

func randomSliceOf{{gofilter $name}}() []{{$name}} {
  rval := []{{$name}}{}
	l := randomuint16() % 256
	for i := uint16(0); i < l; i++ {
	  rval = append(rval, random{{gofilter $name}}())
	}
	return rval
}

{{range $index2, $name2 := $decodeable}}
func randomMapOf{{gofilter $name}}To{{gofilter $name2}}() map[{{$name}}]{{$name2}} {
  rval := map[{{$name}}]{{$name2}}{}
	l := randomuint16() % 512
	for i := uint16(0); i < l; i++ {
	  rval[random{{gofilter $name}}()] = random{{gofilter $name2}}()
	}
	return rval
}

func randomMapOf{{gofilter $name}}PtrTo{{gofilter $name2}}() map[*{{$name}}]{{$name2}} {
  rval := map[*{{$name}}]{{$name2}}{}
	l := randomuint16() % 512
	if randomuint16() % 2 == 1 {
	  rval[nil] = random{{gofilter $name2}}()
	}
	for i := uint16(0); i < l; i++ {
	  key := random{{gofilter $name}}()
	  rval[&key] = random{{gofilter $name2}}()
	}
	return rval
}

func randomMapOf{{gofilter $name}}PtrTo{{gofilter $name2}}Ptr() map[*{{$name}}]*{{$name2}} {
  rval := map[*{{$name}}]*{{$name2}}{}
	l := randomuint16() % 512
	if randomuint16() % 2 == 1 {
	  if randomuint16() % 2 == 1 {
			rval[nil] = nil
		} else {
		  val := random{{gofilter $name2}}()
			rval[nil] = &val
		}
	}
	for i := uint16(0); i < l; i++ {
	  key := random{{gofilter $name}}() 
		if randomuint16() % 2 == 1 {
		  rval[&key] = nil
    } else {
      val := random{{gofilter $name2}}()
			rval[&key] = &val
		}
	}
	return rval
}

func randomMapOf{{gofilter $name}}To{{gofilter $name2}}Ptr() map[{{$name}}]*{{$name2}} {
  rval := map[{{$name}}]*{{$name2}}{}
	l := randomuint16() % 512
	for i := uint16(0); i < l; i++ {
		if randomuint16() % 2 == 1 {
		  rval[random{{gofilter $name}}()] = nil
    } else {
      val := random{{gofilter $name2}}()
			rval[random{{gofilter $name}}()] = &val
		}
	}
	return rval
}
{{end}}
{{end}}

{{range $index, $name := $decodeable}}
func TestGeneratedEncodeDecode{{gofilter $name}}(t *testing.T) {
  for i := 0; i < Runs * 128; i++ {
		var dst {{$name}}
		encodeDecode(t, random{{gofilter $name}}(), &dst)
  }
}

func TestGeneratedEncodeDecode{{gofilter $name}}Ptr(t *testing.T) {
  for i := 0; i < Runs * 128; i++ {
	  var dst {{$name}}
		src := random{{gofilter $name}}()
		encodeDecode(t, &src, &dst)
  }
}

func TestGeneratedEncodeDecodeSliceOf{{gofilter $name}}(t *testing.T) {
  for i := 0; i < Runs * 16; i++ {
	  var dst []{{$name}}
		encodeDecode(t, randomSliceOf{{gofilter $name}}(), &dst)
	}
}

func TestGeneratedEncodeDecodeSliceOf{{gofilter $name}}Ptr(t *testing.T) {
  for i := 0; i < Runs * 16; i++ {
	  var dst []*{{$name}}
		encodeDecode(t, randomSliceOf{{gofilter $name}}Ptr(), &dst)
	}
}

func TestGeneratedEncodeDecodePtrToSliceOf{{gofilter $name}}(t *testing.T) {
  for i := 0; i < Runs * 16; i++ {
	  var dst []{{$name}}
		src := randomSliceOf{{gofilter $name}}()
		encodeDecode(t, &src, &dst)
	}
}

func TestGeneratedEncodeDecodePtrToSliceOf{{gofilter $name}}Ptr(t *testing.T) {
  for i := 0; i < Runs * 16; i++ {
	  var dst []*{{$name}}
		src := randomSliceOf{{gofilter $name}}Ptr()
		encodeDecode(t, &src, &dst)
	}
}

{{range $index2, $name2 := $decodeable}}
func TestGeneratedEncodeDecodeMapOf{{gofilter $name}}To{{gofilter $name2}}(t *testing.T) {
  for i := 0; i < Runs * 16; i++ {
	  var dst map[{{$name}}]{{$name2}}
		encodeDecode(t, randomMapOf{{gofilter $name}}To{{gofilter $name2}}(), &dst)
	}
}

func TestGeneratedEncodeDecodeMapOf{{gofilter $name}}PtrTo{{gofilter $name2}}(t *testing.T) {
  for i := 0; i < Runs * 16; i++ {
	  var dst map[*{{$name}}]{{$name2}}
		encodeDecode(t, randomMapOf{{gofilter $name}}PtrTo{{gofilter $name2}}(), &dst)
	}
}

func TestGeneratedEncodeDecodeMapOf{{gofilter $name}}PtrTo{{gofilter $name2}}Ptr(t *testing.T) {
  for i := 0; i < Runs * 16; i++ {
	  var dst map[*{{$name}}]*{{$name2}}
		encodeDecode(t, randomMapOf{{gofilter $name}}PtrTo{{gofilter $name2}}Ptr(), &dst)
	}
}

func TestGeneratedEncodeDecodeMapOf{{gofilter $name}}To{{gofilter $name2}}Ptr(t *testing.T) {
  for i := 0; i < Runs * 16; i++ {
	  var dst map[{{$name}}]*{{$name2}}
		encodeDecode(t, randomMapOf{{gofilter $name}}To{{gofilter $name2}}Ptr(), &dst)
	}
}

func TestGeneratedEncodeDecodePtrToMapOf{{gofilter $name}}To{{gofilter $name2}}(t *testing.T) {
  for i := 0; i < Runs * 16; i++ {
	  var dst map[{{$name}}]{{$name2}}
		src := randomMapOf{{gofilter $name}}To{{gofilter $name2}}()
		encodeDecode(t, &src, &dst)
	}
}

func TestGeneratedEncodeDecodePtrToMapOf{{gofilter $name}}PtrTo{{gofilter $name2}}(t *testing.T) {
  for i := 0; i < Runs * 16; i++ {
	  var dst map[*{{$name}}]{{$name2}}
		src := randomMapOf{{gofilter $name}}PtrTo{{gofilter $name2}}()
		encodeDecode(t, &src, &dst)
	}
}

func TestGeneratedEncodeDecodePtrToMapOf{{gofilter $name}}PtrTo{{gofilter $name2}}Ptr(t *testing.T) {
  for i := 0; i < Runs * 16; i++ {
	  var dst map[*{{$name}}]*{{$name2}}
		src := randomMapOf{{gofilter $name}}PtrTo{{gofilter $name2}}Ptr()
		encodeDecode(t, &src, &dst)
	}
}

func TestGeneratedEncodeDecodePtrToMapOf{{gofilter $name}}To{{gofilter $name2}}Ptr(t *testing.T) {
  for i := 0; i < Runs * 16; i++ {
	  var dst map[{{$name}}]*{{$name2}}
		src := randomMapOf{{gofilter $name}}To{{gofilter $name2}}Ptr()
		encodeDecode(t, &src, &dst)
	}
}
{{end}}
{{end}}


