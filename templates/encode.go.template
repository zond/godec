package godec

{{ $primitives := .Primitives }}
{{ $all := .All }}

import (
		"io"
		"reflect"
		"fmt"
)

func encodeinterface__(w io.Writer, i interface{}) (err error) {
	switch v := i.(type) {

	case nil:
		return encodeKind(w, reflect.Invalid){{range $index, $name := $primitives}}
	case {{$name}}:
		return encode{{gofilter $name}}(w, v){{end}}{{range $index, $name := $all}}
	case []{{$name}}:
		if err = encodeKind(w, reflect.Slice); err != nil {
			return
		}
		if err = encodeint(w, len(v)); err != nil {
			return
		}
		for _, el := range v {
			if err = encode{{gofilter $name}}(w, el); err != nil {
				return
			}
		}{{end}}{{range $index1, $name1 := $all}}{{range $index2, $name2 := $all}}
	case map[{{$name1}}]{{$name2}}:
		if err = encodeKind(w, reflect.Map); err != nil {
			return
		}
		if err = encodeint(w, len(v)); err != nil {
			return
		}
		for key, value := range v {
			if err = encode{{gofilter $name1}}(w, key); err != nil {
				return
			}
			if err = encode{{gofilter $name2}}(w, value); err != nil {
				return
			}
		}{{end}}{{end}}
	default:
		err = fmt.Errorf("Not yet implemented encoding %v", i)
	}

	return
}
