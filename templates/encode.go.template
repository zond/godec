package godec

{{ $encodeable := .Encodeable }}
{{ $pointerEncodeable := .PointerEncodeable }}
{{ $sliceEncodeable := .SliceEncodeable }}
{{ $mapEncodeable := .MapEncodeable }}

import (
	"time"
	"encoding"
	"encoding/gob"
	"reflect"
)

// All slices are encoded by encoding sliceKind, the element kind, the length, and then all elements.
// If the elements are pointers, the element kind is bitwise ORed with reflect.Ptr.
// But we skip []byte, because they are so darn simple to encode that we do it in another explicit function.
{{range $index, $name := $sliceEncodeable}}
{{if ne $name "uint8"}}
func encodeSliceOf{{gofilter $name}}(w *encodeWriter, encType bool, v []{{$name}}, val *reflect.Value) (err error) {
  if encType {
		if err = encodeType(w, &Type{Base: sliceKind, Value: &Type{Base: {{gofilter $name}}Kind}}); err != nil {
			return
		}
	}
	if err = encodeuint(w, false, uint(len(v)), nil); err != nil {
		return
	}
	for _, el := range v {
		if err = encode{{gofilter $name}}(w, "{{gofilter $name}}" == "interface__", el, nil); err != nil {
			return
		}
	}
	return
}
{{end}}

func encodeSliceOf{{gofilter $name}}Ptr(w *encodeWriter, encType bool, v []*{{$name}}, val *reflect.Value) (err error) {
  if encType {
		if err = encodeType(w, &Type{Base: sliceKind, Value: &Type{Base: ptrKind, Value: &Type{Base: {{gofilter $name}}Kind}}}); err != nil {
			return
		}
	}
	if err = encodeuint(w, false, uint(len(v)), nil); err != nil {
		return
	}
	for _, el := range v {
		if err = encode{{gofilter $name}}Ptr(w, false, el, nil); err != nil {
			return
		}
	}
	return
}
{{end}}

// All maps are encoded by encoding mapKind, the key kind, the value kind and the length. Then all k/v pairs.
// If element types are pointers, the element kind is bitwise ORed with reflect.Ptr.
{{range $index1, $name1 := $mapEncodeable}}
{{range $index2, $name2 := $mapEncodeable}}
func encodeMapOf{{gofilter $name1}}To{{gofilter $name2}}(w *encodeWriter, encType bool, v map[{{$name1}}]{{$name2}}, val *reflect.Value) (err error) {
  if encType {
		if err = encodeType(w, &Type{Base: mapKind, Key: &Type{Base: {{gofilter $name1}}Kind}, Value: &Type{Base: {{gofilter $name2}}Kind}}); err != nil {
			return
		}
	}
	if err = encodeuint(w, false, uint(len(v)), nil); err != nil {
		return
	}
	for key, value := range v {
		if err = encode{{gofilter $name1}}(w, "{{gofilter $name1}}" == "interface__", key, nil); err != nil {
			return
		}
		if err = encode{{gofilter $name2}}(w, "{{gofilter $name2}}" == "interface__", value, nil); err != nil {
			return
		}
	}
	return
}

func encodeMapOf{{gofilter $name1}}PtrTo{{gofilter $name2}}(w *encodeWriter, encType bool, v map[*{{$name1}}]{{$name2}}, val *reflect.Value) (err error) {
  if encType {
		if err = encodeType(w, &Type{Base: mapKind, Key: &Type{Base: ptrKind, Value: &Type{Base: {{gofilter $name1}}Kind}}, Value: &Type{Base: {{gofilter $name2}}Kind}}); err != nil {
			return
		}
	}
	if err = encodeuint(w, false, uint(len(v)), nil); err != nil {
		return
	}
	for key, value := range v {
		if err = encode{{gofilter $name1}}Ptr(w, false, key, nil); err != nil {
			return
		}
		if err = encode{{gofilter $name2}}(w, "{{gofilter $name2}}" == "interface__", value, nil); err != nil {
			return
		}
	}
	return
}

func encodeMapOf{{gofilter $name1}}To{{gofilter $name2}}Ptr(w *encodeWriter, encType bool, v map[{{$name1}}]*{{$name2}}, val *reflect.Value) (err error) {
  if encType {
		if err = encodeType(w, &Type{Base: mapKind, Key: &Type{Base: {{gofilter $name1}}Kind}, Value: &Type{Base: ptrKind, Value: &Type{Base: {{gofilter $name2}}Kind}}}); err != nil {
			return
		}
	}
	if err = encodeuint(w, false, uint(len(v)), nil); err != nil {
		return
	}
	for key, value := range v {
		if err = encode{{gofilter $name1}}(w, "{{gofilter $name1}}" == "interface__", key, nil); err != nil {
			return
		}
		if err = encode{{gofilter $name2}}Ptr(w, false, value, nil); err != nil {
			return
		}
	}
	return
}

func encodeMapOf{{gofilter $name1}}PtrTo{{gofilter $name2}}Ptr(w *encodeWriter, encType bool, v map[*{{$name1}}]*{{$name2}}, val *reflect.Value) (err error) {
  if encType {
		if err = encodeType(w, &Type{Base: mapKind, Key: &Type{Base: ptrKind, Value: &Type{Base: {{gofilter $name1}}Kind}}, Value: &Type{Base: ptrKind, Value: &Type{Base: {{gofilter $name2}}Kind}}}); err != nil {
			return
		}
	}
	if err = encodeuint(w, false, uint(len(v)), nil); err != nil {
		return
	}
	for key, value := range v {
		if err = encode{{gofilter $name1}}Ptr(w, false, key, nil); err != nil {
			return
		}
		if err = encode{{gofilter $name2}}Ptr(w, false, value, nil); err != nil {
			return
		}
	}
	return
}
{{end}}
{{end}}

{{range $index, $name := $encodeable}}
func encode{{gofilter $name}}(w *encodeWriter, encType bool, v {{$name}}, val *reflect.Value) (err error) {
  if encType {
	  if err = encodeType(w, &Type{Base: {{gofilter $name}}Kind}); err != nil {
      return
		}
	}
	return rawencode{{gofilter $name}}(w, v)
}
{{end}}

{{range $index, $name := $pointerEncodeable}}
func encode{{gofilter $name}}Ptr(w *encodeWriter, encType bool, v *{{$name}}, val *reflect.Value) (err error) {
  if encType {
	  if err = encodeType(w, &Type{Base: ptrKind, Value: &Type{Base: {{gofilter $name}}Kind}}); err != nil {
      return
		}
	}
	if v == nil {
	  if err = rawencodebool(w, false); err != nil {
      return
		}
	} else {
	  if err = rawencodebool(w, true); err != nil {
      return
		}
		if err = encode{{gofilter $name}}(w, "{{gofilter $name}}" == "interface__", *v, nil); err != nil {
		  return
		}
	}
  return
}
{{end}}

func encodeinterface__(w *encodeWriter, encType bool, i interface{}, val *reflect.Value) (err error) {
	switch v := i.(type) {

  case nil:
	  err = encodeType(w, &Type{Base: nilKind})
// This does not include interface{} which is handled by this func.
{{range $index, $name := $encodeable}}
	case {{$name}}:
		err = encode{{gofilter $name}}(w, encType, v, nil)
{{end}}
{{range $index, $name := $pointerEncodeable}}
	case *{{$name}}:
		err = encode{{gofilter $name}}(w, encType, *v, nil)
{{end}}
{{range $index, $name := $sliceEncodeable}}
	case []{{$name}}:
		err = encodeSliceOf{{gofilter $name}}(w, encType, v, nil)
	case *[]{{$name}}:
		err = encodeSliceOf{{gofilter $name}}(w, encType, *v, nil)
	case []*{{$name}}:
		err = encodeSliceOf{{gofilter $name}}Ptr(w, encType, v, nil)
	case *[]*{{$name}}:
		err = encodeSliceOf{{gofilter $name}}Ptr(w, encType, *v, nil)
{{end}}
{{range $index1, $name1 := $mapEncodeable}}
{{range $index2, $name2 := $mapEncodeable}}
	case map[{{$name1}}]{{$name2}}:
		err = encodeMapOf{{gofilter $name1}}To{{gofilter $name2}}(w, encType, v, nil)
	case *map[{{$name1}}]{{$name2}}:
		err = encodeMapOf{{gofilter $name1}}To{{gofilter $name2}}(w, encType, *v, nil)
	case map[*{{$name1}}]{{$name2}}:
		err = encodeMapOf{{gofilter $name1}}PtrTo{{gofilter $name2}}(w, encType, v, nil)
	case *map[*{{$name1}}]{{$name2}}:
		err = encodeMapOf{{gofilter $name1}}PtrTo{{gofilter $name2}}(w, encType, *v, nil)
	case map[{{$name1}}]*{{$name2}}:
		err = encodeMapOf{{gofilter $name1}}To{{gofilter $name2}}Ptr(w, encType, v, nil)
	case *map[{{$name1}}]*{{$name2}}:
		err = encodeMapOf{{gofilter $name1}}To{{gofilter $name2}}Ptr(w, encType, *v, nil)
	case map[*{{$name1}}]*{{$name2}}:
		err = encodeMapOf{{gofilter $name1}}PtrTo{{gofilter $name2}}Ptr(w, encType, v, nil)
	case *map[*{{$name1}}]*{{$name2}}:
		err = encodeMapOf{{gofilter $name1}}PtrTo{{gofilter $name2}}Ptr(w, encType, *v, nil)
{{end}}
{{end}}
// Finally, the default will use the magical mystery powers of reflect to encode whatever we encounter.
	default:
	  if bm, ok := i.(encoding.BinaryMarshaler); ok {
		  err = encodebinary_Marshaler(w, encType, bm)
		} else if ge, ok := i.(gob.GobEncoder); ok {
		  err = encodegob_GobEncoder(w, encType, ge)
		} else {
		  if val == nil {
			  v := reflect.ValueOf(i)
				val = &v
			}
			err = encodereflect_Value(w, encType, *val)
		}
	}
	return
}
