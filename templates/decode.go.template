package godec

{{ $encodeable := .Encodeable }}
{{ $decodeable := .Decodeable }}
{{ $sliceDecodeable := .SliceDecodeable }}
{{ $mapDecodeable := .MapDecodeable }}

import (
	"time"
	"encoding"
	"encoding/gob"
	"reflect"
)

// All slices are decoded by verifying that the encoded kind is sliceKind and that the element kind is the same, reading the length of the slice, and then the raw data.
// But we skip []byte, because they are so darn simple to encode that we do it in another explicit function.
{{range $index, $name := $sliceDecodeable}}
{{if ne $name "uint8"}}
func decodeSliceOf{{gofilter $name}}(r *decodeReader, decType bool, v *[]{{$name}}) (err error) {
  if decType {
	  var t *Type
    t, err = decodeType(r)
    if err != nil {
    	return
    }
    if t.Base != sliceKind {
    	err = errorf("Unable to decode %v into *[]{{$name}}", t)
    	return
    }
    if t.Value.Base != {{gofilter $name}}Kind {
    	err = errorf("Unable to decode %v into {{$name}}", t.Value)
    	return
    }
	}
	var l uint
	if err = rawdecodeuint(r, &l); err != nil {
		return
	}
	*v = make([]{{$name}}, int(l))
	for index, _ := range *v {
		if err = decode{{gofilter $name}}(r, "{{gofilter $name}}" == "interface__", &((*v)[index])); err != nil {
			return
		}
	}
	return
}
{{end}}

func decodeSliceOf{{gofilter $name}}Ptr(r *decodeReader, decType bool, v *[]*{{$name}}) (err error) {
  if decType {
	  var t *Type
		t, err = decodeType(r)
		if err != nil {
			return
		}
		if t.Base != sliceKind {
			err = errorf("Unable to decode %v into *[]*{{$name}}", t)
			return
		}
		if t.Value.Base != ptrKind {
			err = errorf("Unable to decode %v into *[]*{{$name}}", t)
			return
		}
		if t.Value.Value.Base != {{gofilter $name}}Kind {
			err = errorf("Unable to decode %v into {{$name}}", t.Value)
			return
		}
	}
	var l uint
	if err = rawdecodeuint(r, &l); err != nil {
		return
	}
	*v = make([]*{{$name}}, int(l))
	for index, _ := range *v {
		var el *{{$name}}
		if err = decode{{gofilter $name}}Ptr(r, false, &el); err != nil {
			return
		}
		(*v)[index] = el
	}
	return
}
{{end}}

// All maps are decoded by verifying that the encoded kind is mapKind, and that the key and value kinds are the same, then reading the raw data.
{{range $index1, $name1 := $mapDecodeable}}
{{range $index2, $name2 := $mapDecodeable}}
func decodeMapOf{{gofilter $name1}}To{{gofilter $name2}}(r *decodeReader, decType bool, v *map[{{$name1}}]{{$name2}}) (err error) {
  if decType {
	  var t *Type
		t, err = decodeType(r)
		if err != nil {
			return
		}
		if t.Base != mapKind {
			err = errorf("Unable to decode %v into *map[{{$name1}}][{{$name2}}", t)
				return
		}
		if t.Key.Base != {{gofilter $name1}}Kind {
			err = errorf("Unable to decode %v into {{$name1}}", t.Key)
				return
		}
		if t.Value.Base != {{gofilter $name2}}Kind {
			err = errorf("Unable to decode %v into {{$name2}}", t.Value)
				return
		}
	}
	var l uint
	if err = rawdecodeuint(r, &l); err != nil {
		return
	}
	*v = make(map[{{$name1}}]{{$name2}}, int(l))
	for i := uint(0); i < l; i++ {
		var key {{$name1}}
		if err = decode{{gofilter $name1}}(r, "{{gofilter $name1}}" == "interface__", &key); err != nil {
			return
		}
		var value {{$name2}}
		if err = decode{{gofilter $name2}}(r, "{{gofilter $name2}}" == "interface__", &value); err != nil {
			return
		}
		(*v)[key] = value
	}
	return
}

func decodeMapOf{{gofilter $name1}}PtrTo{{gofilter $name2}}(r *decodeReader, decType bool, v *map[*{{$name1}}]{{$name2}}) (err error) {
  if decType {
	  var t *Type
		t, err = decodeType(r)
		if err != nil {
			return
		}
		if t.Base != mapKind {
			err = errorf("Unable to decode %v into *map[*{{$name1}}][{{$name2}}", t)
				return
		}
		if t.Key.Base != ptrKind {
			err = errorf("Unable to decode %v into {{$name1}}", t.Key)
			return
		}
		if t.Key.Value.Base != {{gofilter $name1}}Kind {
			err = errorf("Unable to decode %v into {{$name1}}", t.Key)
			return
		}
		if t.Value.Base != {{gofilter $name2}}Kind {
			err = errorf("Unable to decode %v into {{$name2}}", t.Value)
			return
		}
	}
	var l uint
	if err = rawdecodeuint(r, &l); err != nil {
		return
	}
	*v = make(map[*{{$name1}}]{{$name2}}, int(l))
	for i := uint(0); i < l; i++ {
		var key *{{$name1}}
		if err = decode{{gofilter $name1}}Ptr(r, false, &key); err != nil {
			return
		}
		var value {{$name2}}
		if err = decode{{gofilter $name2}}(r, "{{gofilter $name2}}" == "interface__", &value); err != nil {
			return
		}
		(*v)[key] = value
	}
	return
}

func decodeMapOf{{gofilter $name1}}To{{gofilter $name2}}Ptr(r *decodeReader, decType bool, v *map[{{$name1}}]*{{$name2}}) (err error) {
  if decType {
	  var t *Type
		t, err = decodeType(r)
		if err != nil {
			return
		}
		if t.Base != mapKind {
			err = errorf("Unable to decode %v into *map[{{$name1}}][*{{$name2}}", t)
			return
		}
		if t.Key.Base != {{gofilter $name1}}Kind {
			err = errorf("Unable to decode %v into {{$name1}}", t.Key)
			return
		}
		if t.Value.Base != ptrKind {
			err = errorf("Unable to decode %v into {{$name2}}", t.Value)
			return
		}
		if t.Value.Value.Base != {{gofilter $name2}}Kind {
			err = errorf("Unable to decode %v into {{$name2}}", t.Value)
			return
		}
	}
	var l uint
	if err = rawdecodeuint(r, &l); err != nil {
		return
	}
	*v = make(map[{{$name1}}]*{{$name2}}, int(l))
	for i := uint(0); i < l; i++ {
		var key {{$name1}}
		if err = decode{{gofilter $name1}}(r, "{{gofilter $name1}}" == "interface__", &key); err != nil {
			return
		}
		var value *{{$name2}}
		if err = decode{{gofilter $name2}}Ptr(r, false, &value); err != nil {
			return
		}
		(*v)[key] = value
	}
	return
}

func decodeMapOf{{gofilter $name1}}PtrTo{{gofilter $name2}}Ptr(r *decodeReader, decType bool, v *map[*{{$name1}}]*{{$name2}}) (err error) {
  if decType {
	  var t *Type
		t, err = decodeType(r)
		if err != nil {
			return
		}
		if t.Base != mapKind {
			err = errorf("Unable to decode %v into *map[*{{$name1}}]*{{$name2}}", t)
			return
		}
		if t.Key.Base != ptrKind {
			err = errorf("Unable to decode %v into {{$name1}}", t.Key)
			return
		}
		if t.Key.Value.Base != {{gofilter $name1}}Kind {
			err = errorf("Unable to decode %v into {{$name1}}", t.Key)
			return
		}
		if t.Value.Base != ptrKind {
			err = errorf("Unable to decode %v into {{$name2}}", t.Value)
			return
		}
		if t.Value.Value.Base != {{gofilter $name2}}Kind {
			err = errorf("Unable to decode %v into {{$name2}}", t.Value)
			return
		}
	}
	var l uint
	if err = rawdecodeuint(r, &l); err != nil {
		return
	}
	*v = make(map[*{{$name1}}]*{{$name2}}, int(l))
	for i := uint(0); i < l; i++ {
		var key *{{$name1}}
		if err = decode{{gofilter $name1}}Ptr(r, false, &key); err != nil {
			return
		}
		var value *{{$name2}}
		if err = decode{{gofilter $name2}}Ptr(r, false, &value); err != nil {
			return
		}
		(*v)[key] = value
	}
	return
}
{{end}}{{end}}

// All primitive types are parsed by verifying that the encoded kind makes sense, and then parsing their raw data
{{range $index, $name := $encodeable}}
func decode{{gofilter $name}}(r *decodeReader, decType bool, v *{{$name}}) (err error) {
  if decType {
	  var t *Type
		t, err = decodeType(r)
		if err != nil {
			return
		}
		if t.Base != {{gofilter $name}}Kind {
			err = errorf("Unable to decode %v into *{{$name}}", t)
			return
		}
	}
	return rawdecode{{gofilter $name}}(r, v)
}

func decode{{gofilter $name}}Ptr(r *decodeReader, decType bool, v **{{$name}}) (err error) {
  if decType {
	  var t *Type
		t, err = decodeType(r)
		if err != nil {
			return
		}
		if t.Base != ptrKind {
			err = errorf("Unable to decode %v into *{{$name}}", t)
			return
		}
		if t.Value.Base != {{gofilter $name}}Kind {
			err = errorf("Unable to decode %v into *{{$name}}", t)
			return
		}
	}
	notNil := true
	if err = rawdecodebool(r, &notNil); err != nil {
		return
	}
	if notNil {
	  var val {{$name}}
		if err = decode{{gofilter $name}}(r, "{{gofilter $name}}" == "interface__", &val); err != nil {
		  return
		}
		*v = &val
	}
	return
}
{{end}}

func decode(r *decodeReader, decType bool, i interface{}) (err error) {
	switch v := i.(type) {

	case nil:
		err = errorf("Unable to decode to nil pointer")
{{range $index, $name := $decodeable}}
	case *{{$name}}:
		return decode{{gofilter $name}}(r, decType, v)
{{end}}
{{range $index, $name := $sliceDecodeable}}
	case *[]{{$name}}:
		return decodeSliceOf{{gofilter $name}}(r, decType, v)
	case *[]*{{$name}}:
		return decodeSliceOf{{gofilter $name}}Ptr(r, decType, v)
{{end}}
{{range $index1, $name1 := $mapDecodeable}}
{{range $index2, $name2 := $mapDecodeable}}
	case *map[{{$name1}}]{{$name2}}:
		return decodeMapOf{{gofilter $name1}}To{{gofilter $name2}}(r, decType, v)
	case *map[*{{$name1}}]{{$name2}}:
		return decodeMapOf{{gofilter $name1}}PtrTo{{gofilter $name2}}(r, decType, v)
	case *map[{{$name1}}]*{{$name2}}:
		return decodeMapOf{{gofilter $name1}}To{{gofilter $name2}}Ptr(r, decType, v)
	case *map[*{{$name1}}]*{{$name2}}:
		return decodeMapOf{{gofilter $name1}}PtrTo{{gofilter $name2}}Ptr(r, decType, v)
{{end}}
{{end}}
// Finally, the default will use the magical mystery powers of reflect to encode whatever we encounter.
	default:
	  if bu, ok := i.(encoding.BinaryUnmarshaler); ok {
		  return decodebinary_Unmarshaler(r, decType, bu)
		} else if gd, ok := i.(gob.GobDecoder); ok {
		  return decodegob_GobDecoder(r, decType, gd)
		} else {
			return decodereflect_Value(r, decType, reflect.ValueOf(i))
		}
  }
	
	return
}
