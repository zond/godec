package godec

{{ $primitives := .Primitives }}
{{ $all := .All }}

import (
	"fmt"
	"reflect"
)

// All slices are decoded by verifying that the encoded kind is reflect.Slice and that the element kind is the same, reading the length of the slice, and then the raw data.
// But we skip []byte, because they are so darn simple to encode that we do it in another explicit function.
{{range $index, $name := $all}}
{{if ne $name "uint8"}}
func decodeSliceOf{{gofilter $name}}(r DecodeReader, v *[]{{$name}}) (err error) {
	kind, err := decodeKind(r)
	if err != nil {
		return
	}
	if kind != reflect.Slice {
		err = fmt.Errorf("Unable to decode %v into *{{$name}}", kind)
		return
	}
	elkind, err := decodeKind(r)
	if err != nil {
		return
	}
	if elkind != {{gofilter $name}}Kind {
		err = fmt.Errorf("Unable to decode %v into {{$name}}", elkind)
		return
	}
	var l uint
	if err = rawdecodeuint(r, &l); err != nil {
		return
	}
	*v = make([]{{$name}}, int(l))
	for index, _ := range *v {
		if err = rawdecode{{gofilter $name}}(r, &((*v)[index])); err != nil {
			return
		}
	}
	return
}
{{end}}

func decodeSliceOf{{gofilter $name}}Ptr(r DecodeReader, v *[]*{{$name}}) (err error) {
	kind, err := decodeKind(r)
	if err != nil {
		return
	}
	if kind != reflect.Slice {
		err = fmt.Errorf("Unable to decode %v into *{{$name}}", kind)
		return
	}
	elkind, err := decodeKind(r)
	if err != nil {
		return
	}
	if elkind != {{gofilter $name}}Kind {
		err = fmt.Errorf("Unable to decode *%v into {{$name}}", elkind)
		return
	}
	var l uint
	if err = rawdecodeuint(r, &l); err != nil {
		return
	}
	*v = make([]*{{$name}}, int(l))
	for index, _ := range *v {
		var el {{$name}}
		if err = rawdecode{{gofilter $name}}(r, &el); err != nil {
			return
		}
		(*v)[index] = &el
	}
	return
}
{{end}}

// All maps are decoded by verifying that the encoded kind is reflect.Map, and that the key and value kinds are the same, then reading the raw data.
{{range $index1, $name1 := $all}}{{range $index2, $name2 := $all}}
func decodeMapOf{{gofilter $name1}}To{{gofilter $name2}}(r DecodeReader, v *map[{{$name1}}]{{$name2}}) (err error) {
  kind, err := decodeKind(r)
	if err != nil {
		return
	}
	if kind != reflect.Map {
		err = fmt.Errorf("Unable to decode %v into *map[{{$name1}}][{{$name2}}", kind)
		return
	}
	keyKind, err := decodeKind(r)
	if err != nil {
		return
	}
	if keyKind != {{gofilter $name1}}Kind {
	  err = fmt.Errorf("Unable to decode %v into {{$name1}}", keyKind)
		return
	}
	valueKind, err := decodeKind(r)
	if err != nil {
		return
	}
	if valueKind != {{gofilter $name2}}Kind {
		err = fmt.Errorf("Unable to decode %v into {{$name2}}", valueKind)
		return
	}
	var l uint
	if err = rawdecodeuint(r, &l); err != nil {
		return
	}
	*v = make(map[{{$name1}}]{{$name2}}, int(l))
	for i := uint(0); i < l; i++ {
		var key {{$name1}}
		if err = rawdecode{{gofilter $name1}}(r, &key); err != nil {
			return
		}
		var value {{$name2}}
		if err = rawdecode{{gofilter $name2}}(r, &value); err != nil {
			return
		}
		(*v)[key] = value
	}
	return
}

func decodeMapOf{{gofilter $name1}}PtrTo{{gofilter $name2}}(r DecodeReader, v *map[*{{$name1}}]{{$name2}}) (err error) {
  kind, err := decodeKind(r)
	if err != nil {
		return
	}
	if kind != reflect.Map {
		err = fmt.Errorf("Unable to decode %v into *map[*{{$name1}}][{{$name2}}", kind)
		return
	}
	keyKind, err := decodeKind(r)
	if err != nil {
		return
	}
	if keyKind != {{gofilter $name1}}Kind {
	  err = fmt.Errorf("Unable to decode %v into {{$name1}}", keyKind)
		return
	}
	valueKind, err := decodeKind(r)
	if err != nil {
		return
	}
	if valueKind != {{gofilter $name2}}Kind {
		err = fmt.Errorf("Unable to decode %v into {{$name2}}", valueKind)
		return
	}
	var l uint
	if err = rawdecodeuint(r, &l); err != nil {
		return
	}
	*v = make(map[*{{$name1}}]{{$name2}}, int(l))
	for i := uint(0); i < l; i++ {
		var key {{$name1}}
		if err = rawdecode{{gofilter $name1}}(r, &key); err != nil {
			return
		}
		var value {{$name2}}
		if err = rawdecode{{gofilter $name2}}(r, &value); err != nil {
			return
		}
		(*v)[&key] = value
	}
	return
}

func decodeMapOf{{gofilter $name1}}To{{gofilter $name2}}Ptr(r DecodeReader, v *map[{{$name1}}]*{{$name2}}) (err error) {
  kind, err := decodeKind(r)
	if err != nil {
		return
	}
	if kind != reflect.Map {
		err = fmt.Errorf("Unable to decode %v into *map[*{{$name1}}][{{$name2}}", kind)
		return
	}
	keyKind, err := decodeKind(r)
	if err != nil {
		return
	}
	if keyKind != {{gofilter $name1}}Kind {
	  err = fmt.Errorf("Unable to decode %v into {{$name1}}", keyKind)
		return
	}
	valueKind, err := decodeKind(r)
	if err != nil {
		return
	}
	if valueKind != {{gofilter $name2}}Kind {
		err = fmt.Errorf("Unable to decode %v into {{$name2}}", valueKind)
		return
	}
	var l uint
	if err = rawdecodeuint(r, &l); err != nil {
		return
	}
	*v = make(map[{{$name1}}]*{{$name2}}, int(l))
	for i := uint(0); i < l; i++ {
		var key {{$name1}}
		if err = rawdecode{{gofilter $name1}}(r, &key); err != nil {
			return
		}
		var value {{$name2}}
		if err = rawdecode{{gofilter $name2}}(r, &value); err != nil {
			return
		}
		(*v)[key] = &value
	}
	return
}

func decodeMapOf{{gofilter $name1}}PtrTo{{gofilter $name2}}Ptr(r DecodeReader, v *map[*{{$name1}}]*{{$name2}}) (err error) {
  kind, err := decodeKind(r)
	if err != nil {
		return
	}
	if kind != reflect.Map {
		err = fmt.Errorf("Unable to decode %v into *map[*{{$name1}}][{{$name2}}", kind)
		return
	}
	keyKind, err := decodeKind(r)
	if err != nil {
		return
	}
	if keyKind != {{gofilter $name1}}Kind {
	  err = fmt.Errorf("Unable to decode %v into {{$name1}}", keyKind)
		return
	}
	valueKind, err := decodeKind(r)
	if err != nil {
		return
	}
	if valueKind != {{gofilter $name2}}Kind {
		err = fmt.Errorf("Unable to decode %v into {{$name2}}", valueKind)
		return
	}
	var l uint
	if err = rawdecodeuint(r, &l); err != nil {
		return
	}
	*v = make(map[*{{$name1}}]*{{$name2}}, int(l))
	for i := uint(0); i < l; i++ {
		var key {{$name1}}
		if err = rawdecode{{gofilter $name1}}(r, &key); err != nil {
			return
		}
		var value {{$name2}}
		if err = rawdecode{{gofilter $name2}}(r, &value); err != nil {
			return
		}
		(*v)[&key] = &value
	}
	return
}
{{end}}{{end}}

// All primitive types are parsed by verifying that the encoded kind makes sense, and then parsing their raw data
{{range $index, $name := $primitives}}
func decode{{gofilter $name}}(r DecodeReader, v *{{$name}}) (err error) {
	kind, err := decodeKind(r)
	if err != nil {
		return
	}
	if kind != {{gofilter $name}}Kind {
		err = fmt.Errorf("Unable to decode %v into *{{$name}}", kind)
		return
	}
	return rawdecode{{gofilter $name}}(r, v)
}
{{end}}

func decodeinterface__(r DecodeReader, i interface{}) (err error) {
	switch v := i.(type) {

	case nil:
		err = fmt.Errorf("Unable to decode to nil pointer")
{{range $index, $name := $all}}
	case *{{$name}}:
		return decode{{gofilter $name}}(r, v)
{{end}}
{{range $index, $name := $all}}
	case *[]{{$name}}:
		return decodeSliceOf{{gofilter $name}}(r, v)
	case *[]*{{$name}}:
		return decodeSliceOf{{gofilter $name}}Ptr(r, v)
{{end}}
{{range $index1, $name1 := $all}}
{{range $index2, $name2 := $all}}
	case *map[{{$name1}}]{{$name2}}:
		return decodeMapOf{{gofilter $name1}}To{{gofilter $name2}}(r, v)
	case *map[*{{$name1}}]{{$name2}}:
		return decodeMapOf{{gofilter $name1}}PtrTo{{gofilter $name2}}(r, v)
	case *map[{{$name1}}]*{{$name2}}:
		return decodeMapOf{{gofilter $name1}}To{{gofilter $name2}}Ptr(r, v)
	case *map[*{{$name1}}]*{{$name2}}:
		return decodeMapOf{{gofilter $name1}}PtrTo{{gofilter $name2}}Ptr(r, v)
{{end}}
{{end}}
// Finally, the default will use the magical mystery powers of reflect to encode whatever we encounter.
	default:
		return decodereflect_Value(r, reflect.ValueOf(i))
  }
	
	return
}
